#!/bin/sh
# - runtime
# - rw
# - bs
# - ioengine
# - iodepth
# - direct
# - test_size
# - nr_task
# - fallocate
# - time_based
# - raw_disk

. $LKP_SRC/lib/common.sh
. $LKP_SRC/lib/unit.sh
. $LKP_SRC/lib/debug.sh

[ -n "$test_size" ] || die "test_size must be specified for fio"

test_size=$(to_byte $test_size)
size=$((test_size / nr_task))

: ${bs:=4k}
: ${ioengine:=sync}
: ${runtime:=300}
: ${rw:=write}
: ${iodepth:=32}
: ${direct:=0}
: ${fallocate:=posix}
: ${nr_task:=1}

direct=$(parse_bool $direct)
raw_disk=$(parse_bool $raw_disk)

if [ "$raw_disk" = 1 ]; then
	storages=$partitions
else
	storages=$mount_points
fi
[ -z "$storages" ] && die "storages is empty, we can't get jobs_per_storage and nr_task_remain"

nr_storages=$(echo $storages | wc -w)
jobs_per_storage=$((nr_task / nr_storages))

nr_task_remain=$((nr_task % nr_storages))
[ "$nr_task_remain" -ne 0 ] && die "nr_task % nr_storages = $nr_task_remain"

create_task="\
[global]
bs=$bs
ioengine=$ioengine
iodepth=$iodepth
size=$size
direct=$direct
runtime=$runtime
invalidate=1
fallocate=$fallocate
group_reporting
create_only=1
"

if parse_bool -q "$time_based"; then
	create_task="
$create_task
time_based
"
fi

no=0
for storage in $storages; do
	if [ "$raw_disk" = 1 ]; then
		storage_setup="filename=$storage"
	else
		storage_setup="directory=$storage"
	fi
	create_task="\
$create_task
[task_$no]
rw=$rw
$storage_setup
numjobs=$jobs_per_storage
"
	no=$((no+1))
done

echo -n "$create_task" | sed '/create_only/d' > $TMP_RESULT_ROOT/fio.task
echo -n "$create_task" | fio --output-format=json - > /dev/null

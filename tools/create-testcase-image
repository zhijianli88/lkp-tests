#!/bin/bash

[[ -n "$LKP_SRC" ]] || LKP_SRC=$(dirname $(dirname $(readlink -e -v $0)))

LKP_SERVER=internal-lkp-server
LKP_CGI_PORT=80
LKP_USER=lkp

. $LKP_SRC/lib/install.sh

if ! [[ $(id -u) = 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

usage()
{
	cat <<-EOF
Usage:
	$0 < testcase > < image_name >
Example:
	$0 build-qemu  debian
EOF
	exit 1
}

cleanup()
{
	rm -rf $tmp_dir
}

download_testcase_benchmark()
{

	local testcase=$1
	local ret=

	wget -nv -N "http://$LKP_SERVER:$LKP_CGI_PORT/~$LKP_USER//lkp/benchmarks/${testcase}.cgz" &>/dev/null
	ret=$?

	# return value "8"(ERROR 404: Not Found) mean this testcase need no benchmark.
	if [[ "$ret" = "0" ]]; then
		echo ${testcase}.cgz
	else
		[[ "$ret" = "8" ]] || {
			echo "Fail to download benchmark file: ${testcase}.cgz" 1>&2
			exit 1
		}

		wget -nv -N "http://$LKP_SERVER:$LKP_CGI_PORT/~$LKP_USER//lkp/benchmarks/${testcase}-x86_64.cgz" &>/dev/null
		ret=$?
		if [[ "$ret" = "0" ]]; then
			echo ${testcase}-x86_64.cgz
		elif [[ "$ret" = "8" ]];then
			:
		else
			echo "Fail to download benchmark file: ${testcase}-x86_64.cgz" 1>&2
			exit 1
		fi
	fi
}


[[ $# = 2 ]] || usage

testcase=$1
image_name=$2

docker ps >/dev/null || exit

tmp_dir=$(mktemp -d /tmp/create-testcase-image-XXXXXXXXX) || exit

trap cleanup EXIT

cd $tmp_dir
benchmark_package=$(download_testcase_benchmark $testcase) || exit

[[ $benchmark_package ]] && {
	rm -rf /lkp/benchmarks/$testcase
	gzip $tmp_dir/${benchmark_package} -dc | cpio -id &>/dev/null || exit
	mv /lkp/benchmarks/$testcase  $tmp_dir/
}
mkdir -p ./$testcase

basic_packages="nfs-common wget cpio psmisc time"
dependency_packages="$(get_dependency_packages debian $testcase)"

cat >$tmp_dir/dockerfile <<-EOF
FROM $image_name
COPY ./$testcase /lkp/benchmarks/$testcase/
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && \\
    apt-get install -y $basic_packages $dependency_packages
RUN groupadd --gid 1090 lkp
RUN useradd --uid 1090 --gid 1090 lkp
EOF

docker build -t ${image_name}_$testcase . || exit

echo "Create docker image ${image_name}_$testcase for $testcase testcase successfully."

rm -fr "$tmp_dir"

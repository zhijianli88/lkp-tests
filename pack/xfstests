#!/bin/bash

download()
{
	git_clone_update https://kernel.googlesource.com/pub/scm/linux/kernel/git/jaegeuk/f2fs-tools.git
	git_clone_update https://kernel.googlesource.com/pub/scm/fs/xfs/xfsprogs-dev.git --branch for-next
	git_clone_update https://kernel.googlesource.com/pub/scm/fs/xfs/xfstests-dev.git
}

build_upstream_ext4_blacklist()
{
	wget -O ext4-upstream-blacklist https://git.kernel.org/pub/scm/fs/ext2/xfstests-bld.git/plain/kvm-xfstests/test-appliance/files/root/fs/ext4/exclude || return
	cat ext4-upstream-blacklist | grep -v '^#' | grep 'generic/' | awk -F'/' '{print $2}' >> generic-ext4-ignore
	cat ext4-upstream-blacklist | grep -v '^#' | grep 'ext4/' | awk -F'/' '{print $2}' >> ext4-ignore
}

build_install_xfsprogs()
{
	cd ../xfsprogs-dev || return
	cp -r ../xfsprogs-dev  /lkp/benchmarks/$BM_NAME/xfsprogs-dev
	make configure || return
	./configure --prefix=$BUILD_DIR/pack/usr --exec_prefix=$BUILD_DIR/pack/usr
	make || return
	make install
	make install-dev
	# xfstests need those file
	rsync -aK $BUILD_DIR/pack/usr/* /usr
}

build_install_xfstests()
{
	cd ../xfstests-dev
	## Currently, ./configure file can't work with "--prefix" option correctly,
	## so we just use the "make" command to generate the execuable file.
	make
}

build_install_f2fs_tools()
{
	cd ../f2fs-tools || return
	./autogen.sh || return
	./configure || return
	make || return
	make install || return
	make install DESTDIR=$BUILD_DIR/pack
}

# Automatically generate ignore file to skip test cases which can not be enabled at present.
build_ignore_file()
{
	cd ../xfstests-dev || return
	git grep "_require_xfs_mkfs_without_validation" | grep -v "common/" | awk -F '[:/]' '{print $3}' > xfs-ignore
	git grep _require_xfs_io_command | grep -E "fzero|fcollapse|finsert|fcollapse" | grep generic | awk -F '[:/]' '{print $3}' > generic-btrfs-ignore

	build_upstream_ext4_blacklist
}

build_xfs_file()
{
	cd ../xfstests-dev || return
	git grep -l "_require_realtime" | grep tests/xfs | awk -F/ '{ print $3 }' > xfs-external
	git grep -L "_require_realtime" $(git grep -l "_require_scratch_reflink" $(git grep -l "_require_xfs_scratch_rmapbt" | grep tests/xfs))  | awk -F/ '{print $3}' > xfs-reflink_rmapbt
	git grep -L "_require_realtime" $(git grep -L "_require_scratch_reflink" $(git grep -l "_require_xfs_scratch_rmapbt" | grep tests/xfs))  | awk -F/ '{print $3}' > xfs-rmapbt
	git grep -L "_require_realtime" $(git grep -L "_require_xfs_scratch_rmapbt" $(git grep -l "_require_scratch_reflink" | grep tests/xfs))  | awk -F/ '{print $3}' > xfs-reflink
}

build()
{
	build_install_xfsprogs || return
	build_install_xfstests || return
	build_install_f2fs_tools || return
	build_ignore_file || return
	build_xfs_file || return
}

install()
{
	cp -af ./* $BM_ROOT/
	cp -af $LKP_SRC/pack/${BM_NAME}-addon/* $BM_ROOT/

	## generate the new add subcase automatically after every upgrade xfstests
	cd $BM_ROOT/tests
	./update-new-cases.sh ext4
	./update-new-cases.sh btrfs
	./update-new-cases.sh xfs
	./update-new-cases.sh generic
}

pack()
{
    cd $BUILD_DIR/pack || return
    {
        echo /lkp
        echo /lkp/benchmarks
        find /lkp/benchmarks/$BM_NAME
        find ./usr | sed 's/^.//'
    } |
    cpio --quiet -o -H newc | gzip -n -9 > /lkp/benchmarks/${BM_NAME}.cgz
    [[ $arch ]] && mv "/lkp/benchmarks/${BM_NAME}.cgz" "/lkp/benchmarks/${BM_NAME}-${arch}.cgz"
}

#!/bin/sh
# - test

## The LTP testsuite contains a collection of tools for
## testing the Linux kernel and related features.

ltp_dir=$BENCHMARK_ROOT/ltp
ltp_src=$ltp_dir/ltp_src
ltp_install=$ltp_dir/ltp

cd $ltp_dir || exit

. $LKP_SRC/lib/env.sh
. $LKP_SRC/lib/upload.sh
. $LKP_SRC/lib/tests/ltp.sh

export PATH=$ltp_install/bin:$PATH

install_tests()
{
	local LTP_REPO="https://github.com/linux-test-project/ltp.git"
	[ "$LKP_LOCAL_RUN" != "1" ] && LTP_REPO="git://gitmirror/ltp"

	[ "$ltp_commit" ] || return
	# clone code here
	mkdir $ltp_src
	cd $ltp_src
	git clone $LTP_REPO 2>&1 || return
	cd $ltp_src/ltp
	git checkout -f $ltp_commit 2>&1 || return

	build_ltp $ltp_install >/dev/null 2>&1 || return
	install_ltp $ltp_install >/dev/null 2>&1 || return
}

check_ignored_cases()
{
	test=$1
	local ignored_by_lkp=$LKP_SRC/pack/ltp-addon/ignored_by_lkp
	cp $ignored_by_lkp ./ignored_by_lkp

	# regex match
	for regex in $(cat "$ignored_by_lkp" | grep -v '^#' | grep -w ^${test}:.*:regex$ | awk -F: 'NF == 3 {print $2}')
	do
		echo "# regex: $regex generated" >> ./ignored_by_lkp
		cat runtest/$test | awk '{print $1}' | grep -G "$regex" | awk -v prefix=$test":" '$0=prefix$0' >> ./ignored_by_lkp
	done

	orig_test=$(echo "$test" | sed 's/-[0-9]\{2\}$//')
	for i in $(cat ./ignored_by_lkp | grep -v '^#' | grep -w ^$orig_test | awk -F: 'NF == 2')
	do
		ignore=$(echo $i | awk -F: '{print $2}')
		grep -q "^${ignore}" runtest/${test} || continue
		sed -i "s/^${ignore} /#${ignore} /g" runtest/${test}
		echo "<<<test_start>>>"
		echo "tag=${ignore}"
		echo "${ignore} 0 ignored_by_lkp"
		echo "<<<test_end>>>"
	done
}

workaround_env()
{
	# some LTP sh scripts actually need bash. Fixes
	# > netns_childns.sh: 38: .: cmdlib.sh: not found
	[ "$(cmd_path bash)" = '/bin/bash' ] && [ $(readlink -e /bin/sh) != '/bin/bash' ] &&
	ln -fs bash /bin/sh

	# install mkisofs which is linked to genisoimage
	command -v mkisofs || {
		genisoimage=$(command -v genisoimage)
		if [ -n "$genisoimage" ]; then
			log_cmd ln -sf "$genisoimage" /usr/bin/mkisofs
		else
			echo "can not install mkisofs"
		fi
	}
}

specify_tmpdir()
{
	[ -z "$partitions" ] && return 1
	ltp_partition="${partitions%% *}"
	mount_point=/fs/$(basename $ltp_partition)

	mkdir -p $mount_point/tmpdir || return 1
	tmpdir_opt="-d $mount_point/tmpdir"

	return 0
}

install_tests || exit
cd $ltp_install || exit
workaround_env

test_setting()
{
	case "$test" in
	cpuhotplug)
		mkdir -p /usr/src/linux/
		;;
	fs_readonly-0*)
		[ -z "$fs" ] && exit
		[ -z "$partitions" ] && exit
		big_dev="${partitions%% *}"
		umount $big_dev
		big_dev_opt="-Z $fs -z $big_dev"
		;;
	fs_ext4)
		[ -z "$partitions" ] && exit
		big_dev="${partitions%% *}"
		big_dev_opt="-z $big_dev"
		# match logic of check_ignored_cases
		sed -i "s/\t/ /g" $ltp_install/runtest/fs_ext4
		;;
	mm-00)
		sysctl -w vm.oom_kill_allocating_task=1
		;;
	mm-01)
		[ -z "$partitions" ] && exit
		swap_partition="${partitions%% *}"
		mkswap $swap_partition 2>&1 || exit 1
		swapon $swap_partition
		;;
	tpm_tools)
		[ $USER ] || USER=root
		rm -rf /var/lib/opencryptoki/tpm/$USER
		cd tpm-emulater
		find . -maxdepth 1 -type d -name "TPM_Emulator*" -exec rm -rf {} \;
		unzip $(ls TPM_Emulator*.zip | head -1)
		rsync -av $(ls -l . | awk '/^d/ {print $NF}' | head -1)"/" /
		cd ../ltp
		killall tpmd > /dev/null 2>&1
		tpmd -f -d clear > /dev/null 2>&1 &
		killall tcsd > /dev/null 2>&1
		tcsd -e -f > /dev/null 2>&1 &
		sleep 5
		export LTPROOT=${PWD}
		export LTPBIN=$LTPROOT/testcases/bin
		export OWN_PWD="HELLO1"
		export NEW_OWN_PWD="HELLO2"
		export SRK_PWD="HELLO3"
		export NEW_SRK_PWD="HELLO4"
		export P11_SO_PWD="HELLO5"
		export NEW_P11_SO_PWD="HELLO6"
		export P11_USER_PWD="HELLO7"
		export NEW_P11_USER_PWD="HELLO8"
		;;
	ltp-aiodio.part[24]|syscalls_part[14]|dio-0*)
		specify_tmpdir || exit
		;;
	syscalls_part2)
		specify_tmpdir || exit
		relatime=$(mount | grep /tmp | grep relatime)
		noatime=$(mount | grep /tmp | grep noatime)
		if [ "$relatime" != "" ] || [ "$noatime" != "" ]; then
			mount -o remount,strictatime /tmp
		fi
		;;
	syscalls_part5)
		specify_tmpdir || exit
		echo "#\$SystemLogSocketName /run/systemd/journal/syslog" > /etc/rsyslog.d/listen.conf
		systemctl restart rsyslog || exit
		[ -f /var/log/maillog ] || {
			touch /var/log/maillog && chmod 600 /var/log/maillog
		}
		[ -e /dev/log ] && rm /dev/log
		ln -s /run/systemd/journal/dev-log /dev/log
		;;
	net.ipv6_lib)
		iface=$(ifconfig -s | awk '{print $1}' | grep ^eth | head -1)
		[ -n "$iface" ] && export LHOST_IFACES=$iface
		sed -i "1s/^/::1 ${HOSTNAME}\n/" /etc/hosts
		sed -i "1s/^/127.0.0.1 ${HOSTNAME}\n/" /etc/hosts
		;;
	net.rpc)
		systemctl start openbsd-inetd || exit
		cp netkit-rusers/bin/rup /usr/bin/
		;;
	net_stress.appl-0*)
		[ -d /srv/ftp ] && export FTP_DOWNLOAD_DIR=/srv/ftp
		sed -i '/\/usr\/sbin\/named {/a\\/tmp\/** rw,' /etc/apparmor.d/usr.sbin.named || exit
		systemctl start bind9 || exit
		systemctl list-units | grep -wq apparmor.service && (systemctl reload-or-restart apparmor || exit)
		;;
	esac
}

clean_up()
{
	[ "$test" = "mm-00" ] && {
		dmesg -C || exit
	}

	[ "$test" = "syscalls_part2" ] && {
		[ "$relatime" != "" ] && mount -o remount,relatime /tmp
		[ "$noatime" != "" ] && mount -o remount,noatime /tmp
	}
}

test_setting
check_ignored_cases $test
log_cmd ./runltp -f $test $big_dev_opt $tmpdir_opt || exit

exit_value=$?

clean_up

upload_files -t results $ltp_install/results/* \
	$ltp_install/output

exit $exit_value
